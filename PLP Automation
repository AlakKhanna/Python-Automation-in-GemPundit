from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.select import Select
from selenium.webdriver.common.action_chains import ActionChains
from time import sleep
import time
from termcolor import colored
from bs4 import BeautifulSoup
import requests

# ## open the website####
# desired_caps = {
#     "platform": "Windows 10",
#     "browserName": "chrome",
#     "version": "73"
# }
#
# ## open the website####
# username = 'your username'
# access_key = 'your access key'
# driver = webdriver.Remote(
# command_executor = 'https://catalog:8Z0BIANUiEukgAMPspUGtLql3CfBsstD84IH3QOL539A8yoICm@hub.lambdatest.com/wd/hub',
#                    desired_capabilities = desired_caps
# )

driver.maximize_window()
driver.get("https://www.gempundit.com/")
driver.implicitly_wait(10)

####open the category page#####

action = ActionChains(driver);

parent_level_menu = driver.find_element (By.LINK_TEXT, "GEMSTONES")
action.move_to_element(parent_level_menu).perform()

child_level_menu = driver.find_element (By.LINK_TEXT, "Amethyst")
child_level_menu.click();
time.sleep(3)
### Click on gempundit logo###

Click_logo= driver.find_element_by_class_name("logo").click()
time.sleep(3)
Click_logo1= driver.title
if Click_logo1== "Buy Gemstones Online: Loose Gemstones for sale - Best Gemstones Prices | GemPundit.com":
    print(colored("After click on logo Home Page is open", "green"))
else:
    print(colored("After click on logo another Page is open", "green"))
time.sleep(5)
driver.back()
time.sleep(3)

####check breadcrumbs####
breadcrumbs= driver.find_element_by_class_name("""breadcrumbs""").text
print(colored("Whole breadcrumbs on category page", "green"), breadcrumbs)

click_home= driver. find_element_by_link_text("Home").click()
time.sleep(3)
click_home1= driver.title
if click_home1== "Buy Gemstones Online: Loose Gemstones for sale - Best Gemstones Prices | GemPundit.com":
    print(colored("Home breadcrumbs text is clickable & landing on correct page", "green"))
else:
    print(colored("Home breadcrumbs, text is not clickable", "red"))
driver.back()
time.sleep(3)

click_gemstone= driver. find_element_by_link_text("Gemstones").click()
time.sleep(3)
click_gemstone1= driver.title
if click_gemstone1== "Gemstones List: Gemstone Names by Color and Type | GemPundit.com":
    print(colored("Gemstones breadcrumbs text is clickable & landing on correct page", "green"))
else:
    print(colored("Gemstones breadcrumbs, text is not clickable", "red"))
driver.back()
time.sleep(3)

# ###print & click the seo buttons#####

SEO_button= driver.find_elements_by_class_name("tablinks")
for x in range(0,5):
    if SEO_button[x].is_displayed():
        SEO_button[x].click()
        time.sleep(2)
driver.refresh()

###Hide & expand filter###
time.sleep(3)
Hide_filter= driver.find_element_by_class_name("filter_action").click()
time.sleep(3)
expand_filter= driver.find_element_by_class_name("filter_action").click()

total_products= driver.find_element_by_class_name("product-number").text
print(colored(colored("Before filter Selection, total products count:"), "green"), total_products)

#####select all the filter#####################
driver.execute_script("window.scrollTo(1600, 0)","")
time.sleep(3)
price_1filter= driver.find_element_by_class_name("m-to").clear()
time.sleep(2)
price_filter= driver.find_element_by_class_name("m-to").send_keys("100000")

clickanywhere=driver.find_element_by_xpath("//*[@id='narrow-by-list-0']/div/div/li[3]/div[2]/ol/li[1]").click()
time.sleep(7)

Origin_filter= driver.find_element_by_xpath("//*[@id='narrow-by-list-0']/div/div/li[3]/div[2]/ol/li[1]").click()
time.sleep(7)

treatment_filter= driver.find_element_by_xpath("//*[@id='narrow-by-list-0']/div/div/li[4]/div[2]/ol/li[1]/a").click()
time.sleep(5)
driver.refresh()
time.sleep(7)
driver.execute_script("window.scrollTo(0, 400)","")

clickonslidebutton=driver.find_element_by_class_name("slick-next").click()
driver.implicitly_wait(5)
time.sleep(4)
clickonslidebutton=driver.find_element_by_xpath("//*[@id='narrow-by-list-0']/button[2]").click()
time.sleep(2)
driver.execute_script("window.scrollTo(0, 250)","")
shape_filter= driver.find_element_by_xpath("//*[@id='narrow-by-list-0']/div/div/li[9]/div[2]/ol/li[1]/a").click()
time.sleep(5)
Print_selcted_filter= driver.find_element_by_class_name("currently").text
print(Print_selcted_filter)
time.sleep(2)
driver.refresh()
driver.execute_script("window.scrollTo(0, 700)","")
total_products= driver.find_element_by_class_name("product-number").text
print(colored("After filter Selection, total products count:", "green"), total_products)

##### Remove filter#######
action = ActionChains(driver);

parent_level_menu = driver.find_element (By.LINK_TEXT, "GEMSTONES")
action.move_to_element(parent_level_menu).perform()

child_level_menu = driver.find_element (By.LINK_TEXT, "Amethyst")
child_level_menu.click();
time.sleep(3)
####total product reflecting####

time.sleep(3)
time.sleep(3)
Total_product= driver.find_elements_by_class_name("hover-image")
print (colored("Total product images reflecting on category page-", "green"), len (Total_product))
time.sleep(2)
driver.refresh()
time.sleep(2)
driver.refresh()
time.sleep(2)
driver.refresh()

####### Total H1 & H2 Tag #####

H1 = driver.find_elements_by_tag_name("h1")
H2 = driver.find_elements_by_tag_name("h2")
print(colored("Total H1 Tags on this Category Page:", "green"),len(H1))
print(colored("Total H2 Tags on this Category Page", "green"),len(H2))

#####CLick on all wishlist icons######

driver.execute_script("window.scrollTo(0, 700)","")
Wishlist = driver.find_elements_by_class_name("whishlist-icon")
for x in range(0,6):
    if Wishlist[x].is_displayed():
        Wishlist[x].click()
time.sleep(8)
driver.refresh()
time.sleep(3)
driver.refresh()
time.sleep(3)
driver.refresh()
time.sleep(3)
driver.refresh()

driver.execute_script("window.scrollTo(0, 900)","")
Wishlist = driver.find_elements_by_class_name("whishlist-icon")
for x in range(10,14):
    if Wishlist[x].is_displayed():
        Wishlist[x].click()
time.sleep(3)
driver.refresh()
time.sleep(3)
driver.refresh()
time.sleep(3)
driver.refresh()
time.sleep(3)
driver.refresh()

driver.execute_script("window.scrollTo(0, 1600)","")
Wishlist = driver.find_elements_by_class_name("whishlist-icon")
for x in range(14,20):
    if Wishlist[x].is_displayed():
        Wishlist[x].click()
time.sleep(3)

#####Play all configurable video######
driver.execute_script("window.scrollTo(0, 700)","")
playVideo = driver.find_elements_by_class_name("playVideo")
for x in range(0,7):
    if playVideo[x].is_displayed():
        playVideo[x].click()
        time.sleep(3)
        driver.find_element_by_class_name("fancybox-close").click()
time.sleep(8)


####open another category#####
action = ActionChains(driver);

parent_level_menu = driver.find_element (By.LINK_TEXT, "GEMSTONES")
action.move_to_element(parent_level_menu).perform()

child_level_menu = driver.find_element (By.LINK_TEXT, "Amethyst")
child_level_menu.click();

driver.execute_script("window.scrollTo(0, 700)","")
time.sleep(3)

######Click on ring ##########
driver.find_element_by_partial_link_text("RINGS").click()
driver.switch_to.window(driver.window_handles[1])
time.sleep(2)
print(colored(" Category ring Page title", "green "),driver.title)
time.sleep(2)
driver.close()
driver.switch_to.window(driver.window_handles[0])

####Click on pendant####
driver.find_element_by_partial_link_text("PENDANTS").click()
driver.switch_to.window(driver.window_handles[1])
time.sleep(2)
print(colored(" Category Pendants Page title", "green "),driver.title)
time.sleep(2)
driver.close()
driver.switch_to.window(driver.window_handles[0])


###Click on bracelet option
driver.find_element_by_partial_link_text("BRACELETS").click()
driver.switch_to.window(driver.window_handles[1])
time.sleep(2)
print(colored(" Category Bracelet Page title", "green "),driver.title)
time.sleep(2)
driver.close()
driver.switch_to.window(driver.window_handles[0])
time.sleep(3)

##### SHow & hide quick buy option#############

driver.execute_script("window.scrollTo(0, 900)","")
Hide_Quick_buy= driver.find_element_by_class_name("show-hide-quickbuy").click()
time.sleep(3)
Show_quick_buy= driver.find_element_by_class_name("filterup").click()

#####print 3 pages SKU ID #######
Page_1 = driver.find_elements_by_class_name("product-info")
page_1_ops=[]
for span in range(len(Page_1)):
    span1 = Page_1[span].text
    page_1_ops.append(span1)
print(colored(" Page 1 product's SKU IDs for","green"),len(Page_1),colored("products:","green"),page_1_ops)

driver.execute_script("window.scrollTo(0, 22000)","")
Move_page2= driver.find_element_by_link_text("2").click()
time.sleep(7)

Page_2 = driver.find_elements_by_class_name("product-info")
page_2_ops=[]
for span2 in range(len(Page_2)):
    span3 = Page_2[span2].text
    page_2_ops.append(span3)
print(colored(" Page 2 product's SKU IDs for","green"),len(Page_2),colored("products:","green"),page_2_ops)
time.sleep(5)

driver.execute_script("window.scrollTo(0, 22000)","")
Move_page3= driver.find_element_by_link_text("3").click()
time.sleep(7)
Page_3 = driver.find_elements_by_class_name("product-info")
page_3_ops=[]
for span4 in range(len(Page_3)):
    span5 = Page_3[span4].text
    page_3_ops.append(span5)
print(colored(" Page 3 product's SKU IDs for","green"),len(Page_2),colored("products:","green"),page_3_ops)
time.sleep(5)





