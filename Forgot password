from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support.select import Select
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait as wait
from time import sleep
import time
from termcolor import colored
import pandas as pd
from datetime import date
from openpyxl import load_workbook
from googleapiclient.discovery import build
from google_auth_oauthlib.flow import InstalledAppFlow
from google.auth.transport.requests import Request
import pickle
import os.path
import base64
import email
from bs4 import BeautifulSoup
from termcolor import colored

driver = webdriver.Chrome(executable_path=r"C:\Users\Alak\AppData\Local\Programs\Python\Python39\chromedriver.exe")
driver.maximize_window()
driver.get("https://www.gempundit.com/")
driver.implicitly_wait(3)

#####Check forgot password page######

Account_icon_click=driver.find_element_by_class_name("loomaccount").click()
time.sleep(5)
Clicklogin=driver.find_element_by_link_text("Log In").click()
time.sleep(5)

forgotpswrd= driver.find_element_by_class_name("f-left").click()
time.sleep(5)
FP_email= driver.find_element_by_id("email_address").send_keys("alak@gempundit.com")
time.sleep(2)
Submit_button= driver.find_element_by_class_name("buttons-set").click()
time.sleep(5)
message=driver.find_element_by_class_name("messages").text
print(colored(" After submit the email address on forgot password, this message is reflecting:", "red"), message)

# Define the SCOPES. If modifying it, delete the token.pickle file.
SCOPES = ['https://www.googleapis.com/auth/gmail.readonly']


def getEmails():
    creds = None
    if os.path.exists('token.pickle'):
        with open('token.pickle', 'rb') as token:
            creds = pickle.load(token)

    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file('credentials.json', SCOPES)
            creds = flow.run_local_server(port=0)
        with open('token.pickle', 'wb') as token:
            pickle.dump(creds, token)

    # connect to gmail API
    service = build('gmail', 'v1', credentials=creds)

    # request a list of all the messages
    result = service.users().messages().list(maxResults=1, userId='me', labelIds=['INBOX']).execute()

    # We can also pass maxResults to get any number of emails. Like this
    # result = service.users().messages().list(maxResults=200, userId='me').execute()
    messages = result.get('messages')
    # print(messages)
    id1 = messages[0]['id']
    # print(id1)

    txt = service.users().messages().get(userId='me', id=id1).execute()
    # print(txt)

    payload = txt['payload']
    headers = payload['headers']
    # parts = payload.get('partId')[0]
    mssg_parts = payload['body']['data']
    data = mssg_parts.replace("-", "+").replace("_", "/")
    decoded_data = base64.b64decode(data)
    soup = BeautifulSoup(decoded_data, "lxml")
    body = soup.body()
    OTP1 = soup.select_one('p:contains("OTP")')
    # print(str(OTP1)[6:10])
    # print(body)

    # Look for Subject and Sender Email in the headers
    for d in headers:
        if d['name'] == 'Subject':
            subject = d['value']
        if d['name'] == 'From':
            sender = d['value']
    if subject == 'Password Reset Confirmation for Alak Khanna':
        time.sleep(10)
        print(colored("Subject - ", "green"), subject)
        print(colored("Sender - ", "green"), sender)
        print(colored("OTP - ", "green"), str(OTP1)[6:10])
    else:
        print(colored("OTP Mail not found", "red"))



getEmails()
