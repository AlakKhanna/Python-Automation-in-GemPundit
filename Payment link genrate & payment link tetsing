from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support.select import Select
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait as wait
from time import sleep
import time
from termcolor import colored
import pandas as pd
from datetime import date
from openpyxl import load_workbook
from googleapiclient.discovery import build
from google_auth_oauthlib.flow import InstalledAppFlow
from google.auth.transport.requests import Request
import pickle
import os.path
import base64
import email
from bs4 import BeautifulSoup
from termcolor import colored
driver = webdriver.Chrome(executable_path=r"C:\Users\Alak\AppData\Local\Programs\Python\Python39\chromedriver.exe")
driver.maximize_window()
driver.get("https://www.gempundit.com/index.php/00gxp9/sales_order/index/key/1e2db9311eeb6f0be1c9f70fd29a5524/")
driver.implicitly_wait(10)

MG_User= driver.find_element_by_id("username").send_keys("alak")
time.sleep(2)
MG_Password= driver.find_element_by_id("login").send_keys("V8NA0uGTPMVvl9fa")
time.sleep(1)
click_login= driver.find_element_by_class_name("form-button").click()
time.sleep(5)

# Define the SCOPES. If modifying it, delete the token.pickle file.
SCOPES = ['https://www.googleapis.com/auth/gmail.readonly']


def getEmails():
    creds = None
    if os.path.exists('token.pickle'):
        with open('token.pickle', 'rb') as token:
            creds = pickle.load(token)

    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file('credentials.json', SCOPES)
            creds = flow.run_local_server(port=0)
        with open('token.pickle', 'wb') as token:
            pickle.dump(creds, token)

    # connect to gmail API
    service = build('gmail', 'v1', credentials=creds)

    # request a list of all the messages
    result = service.users().messages().list(maxResults=1, userId='me', labelIds=['INBOX']).execute()

    # We can also pass maxResults to get any number of emails. Like this
    # result = service.users().messages().list(maxResults=200, userId='me').execute()
    messages = result.get('messages')
    # print(messages)
    id1 = messages[0]['id']
    # print(id1)

    txt = service.users().messages().get(userId='me', id=id1).execute()
    # print(txt)

    payload = txt['payload']
    headers = payload['headers']
    # parts = payload.get('partId')[0]
    mssg_parts = payload['body']['data']
    data = mssg_parts.replace("-", "+").replace("_", "/")
    decoded_data = base64.b64decode(data)
    soup = BeautifulSoup(decoded_data, "lxml")
    body = soup.body()
    OTP1 = soup.select_one('p:contains("OTP")')
    # print(str(OTP1)[6:10])
    # print(body)

    # Look for Subject and Sender Email in the headers
    for d in headers:
        if d['name'] == 'Subject':
            subject = d['value']
        if d['name'] == 'From':
             sender = d['value']
    if subject == 'GemPundit : Magento Login OTP':
        print(colored("Subject - ", "green"), subject)
        print(colored("Sender - ", "green"), sender)
        print(colored("OTP - ", "green"), str(OTP1)[6:10])
    else:
        print(colored("OTP Mail not found", "red"))
    Put_OTP = driver.find_element_by_id("otp").send_keys(str(OTP1)[6:10])
    time.sleep(7)
    Confirm_login = driver.find_element_by_xpath("//*[@id='loginForm']/div/div[6]/input[2]").click()


getEmails()

time.sleep(3)
driver.refresh()
#####open order page##############
action = ActionChains(driver);

parent_level_menu = driver.find_element (By.LINK_TEXT, "Directpay Transactions")
action.move_to_element(parent_level_menu).perform()

child_level_menu = driver.find_element (By.LINK_TEXT, "Transactions")
child_level_menu.click();
time.sleep(6)

####Click on add transaction#####
time.sleep(5)
Add_transaction= driver.find_element_by_xpath("/html/body/div[1]/div[4]/div/div[2]/table/tbody/tr/td[2]/button/span/span/span").click()
####### FIll payment form#####
time.sleep(5)
name= driver.find_element_by_id("customer_name").send_keys("test")
email= driver.find_element_by_id("customer_email").send_keys("alak@gempundit.com")
amount= driver.find_element_by_id("amount").send_keys("110648")
comments= driver.find_element_by_id("comments").send_keys("test")
time.sleep(5)

####save trasaction######
save= driver.find_element_by_xpath("/html/body/div[1]/div[4]/div/div/div[2]/div/div[2]/p/button[3]/span/span/span").click()
time.sleep(3)

#####Open payment link from gmail#####

#####Email confirmiation####################

SCOPES = ['https://www.googleapis.com/auth/gmail.readonly']

def getEmails_pwd():
    creds = None
    if os.path.exists('token.pickle'):
        with open('token.pickle', 'rb') as token:
            creds = pickle.load(token)

    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file('credentials.json', SCOPES)
            creds = flow.run_local_server(port=0)
        with open('token.pickle', 'wb') as token:
            pickle.dump(creds, token)

    #connect to gmail API
    service = build('gmail', 'v1', credentials=creds)

    # request a list of all the messages
    result = service.users().messages().list(maxResults=1,userId='me',labelIds = ['INBOX']).execute()

    # We can also pass maxResults to get any number of emails. Like this
    # result = service.users().messages().list(maxResults=200, userId='me').execute()
    messages = result.get('messages')
    #print(messages)
    id1 = messages[0]['id']
    #print(id1)

    txt = service.users().messages().get(userId='me', id=id1).execute()
    #print(txt)

    payload = txt['payload']
    headers = payload['headers']
    #print(headers)
    #parts = payload.get('parts')
    #print(parts)
    mssg_parts = payload['body']['data']
    data = mssg_parts.replace("-","+").replace("_","/")
    decoded_data = base64.b64decode(data)
    soup = BeautifulSoup(decoded_data , "lxml")
    body = soup.body()
    #print(body)
    #price = soup.select_one('td:contains("price")')
    #price = soup.select_one("span[class*=price]").text
    #print(price)
    all_links=soup.findAll("a")

    for d in headers:
        if d['name'] == 'Subject':
            subject = d['value']
            #print("Subject:",subject)
        if d['name'] == 'From':
            sender = d['value']
            #print("Sender:",sender)

    for links in all_links:
        #print(links.get("href"))
        if links.get("href").startswith("https://www.gempundit.com/direct-payment"):
            reset_link=links.get("href")
            #print(reset_link)

    if subject.startswith("GemPundit: Payment link"):
        print(colored("Payment Link:","green"),reset_link)
        driver.implicitly_wait(5)

        driver.execute_script("window.open('');")
        time.sleep(5)
        driver.switch_to.window(driver.window_handles[1])
        driver.get(reset_link)
        time.sleep(5)

getEmails_pwd()
time.sleep(3)

######Check the payment link in inr######

CLick_submit=driver.find_element_by_name("submit").click()
time.sleep(3)
cols= driver.find_element_by_id("login:guest").click()
time.sleep(5)
First_name=driver.find_element_by_id("billing:firstname")
First_name.send_keys("Test")
Last_name=driver.find_element_by_id("billing:lastname")
Last_name.send_keys("Test")
email=driver.find_element_by_id("billing:email")
email.send_keys("alak@gempundit.com")
Phone=driver.find_element_by_id("billing:telephone")
Phone.send_keys("9876543210")
Addressline1=driver.find_element_by_id("billing:street1")
Addressline1.send_keys("Test")
Addressline2=driver.find_element_by_id("billing:street2")
Addressline2.send_keys("Test")

City=driver.find_element_by_id("billing:city")
City.send_keys("Gurgaon")
Zipcode=driver.find_element_by_id("billing:postcode")
Zipcode.send_keys("122003")

State13= driver.find_element_by_id("billing:region_id")
drp=Select(State13)
drp.select_by_index(13)
Clickcontinue=driver.find_element_by_id("custom_checkstate").click()

################ Payment section#####################

driver.execute_script("window.scrollTo(0, 600)","")
time.sleep(5)

All_payment_option= driver.find_elements_by_class_name("c_pmethod")
for i in All_payment_option:
   print("This payment option reflecting for Indian Address (as a guest user): ", i.text)

##### After log in payment options######
time.sleep(2)
driver.back()
CLick_submit=driver.find_element_by_name("submit").click()
time.sleep(3)
already_account= driver.find_element_by_id("alreadyhaveaccount_checkout").click()
time.sleep(2)
#####log in for indian address######
email= driver.find_element_by_id("login-email").send_keys("alak@gempundit.com")
password= driver.find_element_by_id("login-password").send_keys("Qwerty@123")
click_signin= driver.find_element_by_xpath("//*[@id='checkout-step-login']/div[1]/div[3]/div[1]/div/button").click()
time.sleep(2)

####For indian address continue#####
Clickcontinue=driver.find_element_by_id("custom_checkstate").click()

driver.execute_script("window.scrollTo(0, 600)","")
time.sleep(5)

All_payment_option= driver.find_elements_by_class_name("c_pmethod")
for i in All_payment_option:
   print("This payment option reflecting for Indian Address (After Login): ", i.text)

time.sleep(3)

####Close window & switch back to magento#####

driver.close()
driver = webdriver.Chrome(executable_path=r"C:\Users\Alak\AppData\Local\Programs\Python\Python39\chromedriver.exe")
driver.maximize_window()
driver.get("https://www.gempundit.com/index.php/00gxp9/sales_order/index/key/1e2db9311eeb6f0be1c9f70fd29a5524/")
driver.implicitly_wait(10)

MG_User= driver.find_element_by_id("username").send_keys("alak")
time.sleep(2)
MG_Password= driver.find_element_by_id("login").send_keys("V8NA0uGTPMVvl9fa")
time.sleep(1)
click_login= driver.find_element_by_class_name("form-button").click()
time.sleep(5)

# Define the SCOPES. If modifying it, delete the token.pickle file.
SCOPES = ['https://www.googleapis.com/auth/gmail.readonly']


def getEmails():
    creds = None
    if os.path.exists('token.pickle'):
        with open('token.pickle', 'rb') as token:
            creds = pickle.load(token)

    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file('credentials.json', SCOPES)
            creds = flow.run_local_server(port=0)
        with open('token.pickle', 'wb') as token:
            pickle.dump(creds, token)

    # connect to gmail API
    service = build('gmail', 'v1', credentials=creds)

    # request a list of all the messages
    result = service.users().messages().list(maxResults=1, userId='me', labelIds=['INBOX']).execute()

    # We can also pass maxResults to get any number of emails. Like this
    # result = service.users().messages().list(maxResults=200, userId='me').execute()
    messages = result.get('messages')
    # print(messages)
    id1 = messages[0]['id']
    # print(id1)

    txt = service.users().messages().get(userId='me', id=id1).execute()
    # print(txt)

    payload = txt['payload']
    headers = payload['headers']
    # parts = payload.get('partId')[0]
    mssg_parts = payload['body']['data']
    data = mssg_parts.replace("-", "+").replace("_", "/")
    decoded_data = base64.b64decode(data)
    soup = BeautifulSoup(decoded_data, "lxml")
    body = soup.body()
    OTP1 = soup.select_one('p:contains("OTP")')
    # print(str(OTP1)[6:10])
    # print(body)

    # Look for Subject and Sender Email in the headers
    for d in headers:
        if d['name'] == 'Subject':
            subject = d['value']
        if d['name'] == 'From':
            sender = d['value']
    # if subject == 'GemPundit : Magento Login OTP':
    #     print(colored("Subject - ", "green"), subject)
    #     print(colored("Sender - ", "green"), sender)
    #     print(colored("OTP - ", "green"), str(OTP1)[6:10])
    # else:
    #     print(colored("OTP Mail not found", "red"))
    Put_OTP = driver.find_element_by_id("otp").send_keys(str(OTP1)[6:10])
    time.sleep(7)
    Confirm_login = driver.find_element_by_xpath("//*[@id='loginForm']/div/div[6]/input[2]").click()


getEmails()

time.sleep(3)
driver.refresh()
#####open order page##############
action = ActionChains(driver);

parent_level_menu = driver.find_element (By.LINK_TEXT, "Directpay Transactions")
action.move_to_element(parent_level_menu).perform()

child_level_menu = driver.find_element (By.LINK_TEXT, "Transactions")
child_level_menu.click();
time.sleep(6)

####Click on add transaction#####
time.sleep(5)
Add_transaction= driver.find_element_by_xpath("/html/body/div[1]/div[4]/div/div[2]/table/tbody/tr/td[2]/button/span/span/span").click()
####### FIll payment form#####
time.sleep(5)
name= driver.find_element_by_id("customer_name").send_keys("test")
email= driver.find_element_by_id("customer_email").send_keys("alak@gempundit.com")
amount= driver.find_element_by_id("amount").send_keys("100")
currency=driver.find_element_by_id("payment_currency")
drp= Select(currency)
drp.select_by_index(60)

comments= driver.find_element_by_id("comments").send_keys("test")
time.sleep(5)

####save trasaction######
save= driver.find_element_by_xpath("/html/body/div[1]/div[4]/div/div/div[2]/div/div[2]/p/button[3]/span/span/span").click()
time.sleep(3)

#####Open payment link from gmail#####

#####Email confirmiation####################

SCOPES = ['https://www.googleapis.com/auth/gmail.readonly']

def getEmails_pwd():
    creds = None
    if os.path.exists('token.pickle'):
        with open('token.pickle', 'rb') as token:
            creds = pickle.load(token)

    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file('credentials.json', SCOPES)
            creds = flow.run_local_server(port=0)
        with open('token.pickle', 'wb') as token:
            pickle.dump(creds, token)

    #connect to gmail API
    service = build('gmail', 'v1', credentials=creds)

    # request a list of all the messages
    result = service.users().messages().list(maxResults=1,userId='me',labelIds = ['INBOX']).execute()

    # We can also pass maxResults to get any number of emails. Like this
    # result = service.users().messages().list(maxResults=200, userId='me').execute()
    messages = result.get('messages')
    #print(messages)
    id1 = messages[0]['id']
    #print(id1)

    txt = service.users().messages().get(userId='me', id=id1).execute()
    #print(txt)

    payload = txt['payload']
    headers = payload['headers']
    #print(headers)
    #parts = payload.get('parts')
    #print(parts)
    mssg_parts = payload['body']['data']
    data = mssg_parts.replace("-","+").replace("_","/")
    decoded_data = base64.b64decode(data)
    soup = BeautifulSoup(decoded_data , "lxml")
    body = soup.body()
    #print(body)
    #price = soup.select_one('td:contains("price")')
    #price = soup.select_one("span[class*=price]").text
    #print(price)
    all_links=soup.findAll("a")

    for d in headers:
        if d['name'] == 'Subject':
            subject = d['value']
            #print("Subject:",subject)
        if d['name'] == 'From':
            sender = d['value']
            #print("Sender:",sender)

    for links in all_links:
        #print(links.get("href"))
        if links.get("href").startswith("https://www.gempundit.com/direct-payment"):
            reset_link=links.get("href")
            #print(reset_link)

    if subject.startswith("GemPundit: Payment link"):
        print(colored("Payment Link:","green"),reset_link)
        driver.implicitly_wait(5)

        driver.execute_script("window.open('');")
        time.sleep(5)
        driver.switch_to.window(driver.window_handles[1])
        driver.get(reset_link)
        time.sleep(5)

getEmails_pwd()
time.sleep(3)

CLick_submit=driver.find_element_by_name("submit").click()
time.sleep(3)
cols= driver.find_element_by_id("login:guest").click()
time.sleep(5)
First_name=driver.find_element_by_id("billing:firstname")
First_name.send_keys("Test")
Last_name=driver.find_element_by_id("billing:lastname")
Last_name.send_keys("Test")
email=driver.find_element_by_id("billing:email")
email.send_keys("alak@gempundit.com")
Phone=driver.find_element_by_id("billing:telephone")
Phone.send_keys("9876543210")
Addressline1=driver.find_element_by_id("billing:street1")
Addressline1.send_keys("Test")
Addressline2=driver.find_element_by_id("billing:street2")
Addressline2.send_keys("Test")
country= driver.find_element_by_id("billing:country_id")
drp= Select(country)
drp.select_by_index(233)

State13= driver.find_element_by_id("billing:region_id")
drp=Select(State13)
drp.select_by_index(18)

City=driver.find_element_by_id("billing:city")
City.send_keys("Orlando")
Zipcode=driver.find_element_by_id("billing:postcode")
Zipcode.send_keys("32085")


Clickcontinue=driver.find_element_by_id("custom_checkstate").click()

################ Payment section#####################

driver.execute_script("window.scrollTo(0, 600)","")
time.sleep(5)

All_payment_option= driver.find_elements_by_class_name("c_pmethod")
for i in All_payment_option:
   print("This payment option reflecting for US Address (as a guest user): ", i.text)

##### After log in payment options######
time.sleep(2)
driver.back()
CLick_submit=driver.find_element_by_name("submit").click()
time.sleep(3)
already_account= driver.find_element_by_id("alreadyhaveaccount_checkout").click()
time.sleep(2)
#####log in for USA address######

email= driver.find_element_by_id("login-email").send_keys("alak@gempundit.com")
password= driver.find_element_by_id("login-password").send_keys("Qwerty@123")
click_signin= driver.find_element_by_xpath("//*[@id='checkout-step-login']/div[1]/div[3]/div[1]/div/button").click()
time.sleep(2)
select_new_address=driver.find_element_by_id("billing-address-select")
drp= Select(select_new_address)
drp.select_by_index(1)

Addressline2=driver.find_element_by_id("billing:street2")
Addressline2.send_keys("Test")
country= driver.find_element_by_id("billing:country_id")
drp= Select(country)
drp.select_by_index(233)

State13= driver.find_element_by_id("billing:region_id")
drp=Select(State13)
drp.select_by_index(18)

City=driver.find_element_by_id("billing:city").clear()
enter_city=driver.find_element_by_id("billing:city").send_keys("Orlando")

Zipcode=driver.find_element_by_id("billing:postcode").clear()
Enter_Zipcode= driver.find_element_by_id("billing:postcode").send_keys("32085")
time.sleep(3)

Clickcontinue=driver.find_element_by_id("custom_checkstate").click()

driver.execute_script("window.scrollTo(0, 600)","")
time.sleep(5)

All_payment_option= driver.find_elements_by_class_name("c_pmethod")
for i in All_payment_option:
   print("This payment option reflecting for US Address (After Login): ", i.text)

time.sleep(3)
